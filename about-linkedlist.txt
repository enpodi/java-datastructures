

REF  https://www.interviewcake.com/concept/java/linked-list

Most languages (including Java) don't provide a linked list implementation. 
Assuming we've already implemented our own, here's how we'd construct the linked list above:

LinkedListNode a = new LinkedListNode(5);
LinkedListNode b = new LinkedListNode(1);
LinkedListNode c = new LinkedListNode(9);

a.next = b;
b.next = c;


Quick reference

A linked list organizes items sequentially, with each item storing a pointer to the next one.

Picture a linked list like a chain of paperclips linked together. It's quick to add another paperclip to the top or bottom. 
It's even quick to insert one in the middleâ€”just disconnect the chain at the middle link, add the new paperclip, then reconnect the other half.

An item in a linked list is called a node. The first node is called the head. The last node is called the tail.

>>  Unlike an array, consecutive items in a linked list are not necessarily next to each other in memory. <<


Worst Case

space	O(n)
prepend	O(1)
append	O(1)
lookup	O(n)
insert	O(n)
delete	O(n)

Strengths:

Fast operations on the ends. Adding elements at either end of a linked list is O(1)O(1). Removing the first element is also O(1)O(1).
Flexible size. There's no need to specify how many elements you're going to store ahead of time. 
You can keep adding elements as long as there's enough space on the machine.

Weaknesses:

Costly lookups. To access or edit an item in a linked list, you have to take O(i)O(i) time to walk from the head of the list to the iith item.

Uses:

Stacks and queues only need fast operations on the ends, so linked lists are ideal.


Not cache-friendly
Most computers have caching systems that make reading from sequential addresses in memory faster than reading from scattered addresses.

Array items are always located right next to each other in computer memory, but linked list nodes can be scattered all over.

So iterating through a linked list is usually quite a bit slower than iterating through the items in an array, even though they're both theoretically O(n)O(n) time.